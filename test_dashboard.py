#!/usr/bin/env python3
"""
Test reports and performance dashboard generator
Creates comprehensive visual reports and dashboards for test results
"""
import os
import sys
import json
import time
import statistics
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime, timedelta
import base64

class TestDashboard:
    """Test dashboard and report generator"""
    
    def __init__(self, reports_dir: str = "test_reports"):
        self.reports_dir = reports_dir
        self.dashboard_dir = os.path.join(reports_dir, "dashboard")
        os.makedirs(self.dashboard_dir, exist_ok=True)
        
    def generate_dashboard(self, test_data: Dict[str, Any], 
                          performance_data: Dict[str, Any] = None,
                          memory_data: Dict[str, Any] = None,
                          quality_data: Dict[str, Any] = None) -> str:
        """Generate comprehensive HTML dashboard"""
        
        dashboard_html = self.create_dashboard_html(
            test_data, performance_data, memory_data, quality_data
        )
        
        dashboard_file = os.path.join(self.dashboard_dir, f"dashboard_{int(time.time())}.html")
        with open(dashboard_file, 'w') as f:
            f.write(dashboard_html)
            
        # Create symlink to latest dashboard
        latest_file = os.path.join(self.dashboard_dir, "latest.html")
        try:
            if os.path.exists(latest_file):
                os.remove(latest_file)
            os.symlink(os.path.basename(dashboard_file), latest_file)
        except:
            # Fallback for Windows or systems without symlink support
            with open(latest_file, 'w') as f:
                f.write(dashboard_html)
                
        return dashboard_file
        
    def create_dashboard_html(self, test_data: Dict[str, Any], 
                             performance_data: Dict[str, Any] = None,
                             memory_data: Dict[str, Any] = None,
                             quality_data: Dict[str, Any] = None) -> str:
        """Create comprehensive HTML dashboard"""
        
        timestamp = test_data.get('timestamp', time.strftime('%Y-%m-%d %H:%M:%S'))
        summary = test_data.get('summary', {})
        
        # Extract data for charts
        test_chart_data = self.prepare_test_chart_data(test_data)
        performance_chart_data = self.prepare_performance_chart_data(performance_data) if performance_data else None
        memory_chart_data = self.prepare_memory_chart_data(memory_data) if memory_data else None
        quality_chart_data = self.prepare_quality_chart_data(quality_data) if quality_data else None
        
        html = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test Dashboard - {timestamp}</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        {self.get_dashboard_css()}
    </style>
</head>
<body>
    <div class="container">
        <header class="header">
            <h1>üß™ Test Execution Dashboard</h1>
            <div class="header-info">
                <span class="timestamp">Generated: {timestamp}</span>
                <span class="status {'status-success' if summary.get('overall_success', False) else 'status-failure'}">
                    {'‚úÖ SUCCESS' if summary.get('overall_success', False) else '‚ùå FAILURE'}
                </span>
            </div>
        </header>
        
        <div class="metrics-grid">
            {self.create_metrics_cards(summary)}
        </div>
        
        <div class="charts-grid">
            <div class="chart-container">
                <h3>Test Results Overview</h3>
                <canvas id="testResultsChart"></canvas>
            </div>
            
            <div class="chart-container">
                <h3>Test Execution Timeline</h3>
                <canvas id="timelineChart"></canvas>
            </div>
            
            {self.create_performance_charts(performance_chart_data) if performance_chart_data else ''}
            {self.create_memory_charts(memory_chart_data) if memory_chart_data else ''}
            {self.create_quality_charts(quality_chart_data) if quality_chart_data else ''}
        </div>
        
        <div class="details-section">
            {self.create_test_details_table(test_data)}
            {self.create_performance_details(performance_data) if performance_data else ''}
            {self.create_memory_details(memory_data) if memory_data else ''}
            {self.create_quality_details(quality_data) if quality_data else ''}
        </div>
        
        <footer class="footer">
            <p>Dashboard generated by Document Slides POC Test Suite</p>
            <p>Report generated at {timestamp}</p>
        </footer>
    </div>
    
    <script>
        {self.create_chart_scripts(test_chart_data, performance_chart_data, memory_chart_data, quality_chart_data)}
    </script>
</body>
</html>
"""
        return html
        
    def get_dashboard_css(self) -> str:
        """Get CSS styles for dashboard"""
        return """
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background-color: #f5f7fa;
            color: #2d3748;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 12px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            font-weight: 700;
        }
        
        .header-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px;
        }
        
        .timestamp {
            font-size: 1.1rem;
            opacity: 0.9;
        }
        
        .status-success {
            background-color: #48bb78;
            padding: 8px 16px;
            border-radius: 6px;
            font-weight: 600;
            font-size: 1.1rem;
        }
        
        .status-failure {
            background-color: #f56565;
            padding: 8px 16px;
            border-radius: 6px;
            font-weight: 600;
            font-size: 1.1rem;
        }
        
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .metric-card {
            background: white;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
            border: 1px solid #e2e8f0;
            transition: transform 0.2s, box-shadow 0.2s;
        }
        
        .metric-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }
        
        .metric-card h3 {
            font-size: 0.9rem;
            color: #718096;
            margin-bottom: 8px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            font-weight: 600;
        }
        
        .metric-value {
            font-size: 2.5rem;
            font-weight: 700;
            color: #2d3748;
            margin-bottom: 5px;
        }
        
        .metric-value.success { color: #38a169; }
        .metric-value.warning { color: #d69e2e; }
        .metric-value.error { color: #e53e3e; }
        
        .metric-subtitle {
            font-size: 0.85rem;
            color: #a0aec0;
        }
        
        .charts-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 30px;
            margin-bottom: 40px;
        }
        
        .chart-container {
            background: white;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
            border: 1px solid #e2e8f0;
        }
        
        .chart-container h3 {
            margin-bottom: 20px;
            font-size: 1.3rem;
            color: #2d3748;
            font-weight: 600;
        }
        
        .chart-container canvas {
            max-height: 300px;
        }
        
        .details-section {
            margin-top: 40px;
        }
        
        .details-table {
            width: 100%;
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
            border: 1px solid #e2e8f0;
            margin-bottom: 30px;
        }
        
        .details-table h3 {
            background: #f7fafc;
            padding: 20px 25px;
            margin: 0;
            font-size: 1.3rem;
            color: #2d3748;
            border-bottom: 1px solid #e2e8f0;
        }
        
        .details-table table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .details-table th,
        .details-table td {
            padding: 12px 25px;
            text-align: left;
            border-bottom: 1px solid #f1f5f9;
        }
        
        .details-table th {
            background-color: #f8fafc;
            font-weight: 600;
            color: #4a5568;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .details-table td {
            color: #2d3748;
        }
        
        .status-pass { color: #38a169; font-weight: 600; }
        .status-fail { color: #e53e3e; font-weight: 600; }
        .status-skip { color: #d69e2e; font-weight: 600; }
        
        .footer {
            text-align: center;
            margin-top: 60px;
            padding: 30px;
            color: #718096;
            border-top: 1px solid #e2e8f0;
        }
        
        .footer p {
            margin-bottom: 5px;
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .charts-grid {
                grid-template-columns: 1fr;
                gap: 20px;
            }
            
            .metrics-grid {
                grid-template-columns: 1fr;
            }
        }
        """
        
    def create_metrics_cards(self, summary: Dict[str, Any]) -> str:
        """Create metrics cards HTML"""
        cards = []
        
        # Overall success rate
        overall_success = summary.get('overall_success', False)
        cards.append(f"""
            <div class="metric-card">
                <h3>Overall Status</h3>
                <div class="metric-value {'success' if overall_success else 'error'}">
                    {'PASS' if overall_success else 'FAIL'}
                </div>
                <div class="metric-subtitle">Test execution result</div>
            </div>
        """)
        
        # Test suites
        total_suites = summary.get('total_test_suites', 0)
        passed_suites = summary.get('suites_passed', 0)
        cards.append(f"""
            <div class="metric-card">
                <h3>Test Suites</h3>
                <div class="metric-value {'success' if passed_suites == total_suites else 'warning' if passed_suites > 0 else 'error'}">
                    {passed_suites}/{total_suites}
                </div>
                <div class="metric-subtitle">Suites passed</div>
            </div>
        """)
        
        # Test pass rate
        pass_rate = summary.get('pass_rate', 0)
        cards.append(f"""
            <div class="metric-card">
                <h3>Pass Rate</h3>
                <div class="metric-value {'success' if pass_rate >= 90 else 'warning' if pass_rate >= 70 else 'error'}">
                    {pass_rate:.1f}%
                </div>
                <div class="metric-subtitle">Tests passed</div>
            </div>
        """)
        
        # Code coverage
        coverage = summary.get('coverage_percentage', 0)
        cards.append(f"""
            <div class="metric-card">
                <h3>Code Coverage</h3>
                <div class="metric-value {'success' if coverage >= 80 else 'warning' if coverage >= 60 else 'error'}">
                    {coverage:.1f}%
                </div>
                <div class="metric-subtitle">Lines covered</div>
            </div>
        """)
        
        # Execution time
        exec_time = summary.get('total_execution_time', 0)
        time_str = f"{exec_time:.1f}s" if exec_time < 60 else f"{exec_time/60:.1f}m"
        cards.append(f"""
            <div class="metric-card">
                <h3>Execution Time</h3>
                <div class="metric-value {'success' if exec_time < 300 else 'warning' if exec_time < 600 else 'error'}">
                    {time_str}
                </div>
                <div class="metric-subtitle">Total runtime</div>
            </div>
        """)
        
        # Critical gates
        critical_failures = summary.get('critical_gates_failed', 0)
        cards.append(f"""
            <div class="metric-card">
                <h3>Critical Gates</h3>
                <div class="metric-value {'success' if critical_failures == 0 else 'error'}">
                    {critical_failures}
                </div>
                <div class="metric-subtitle">Critical failures</div>
            </div>
        """)
        
        return "\\n".join(cards)
        
    def prepare_test_chart_data(self, test_data: Dict[str, Any]) -> Dict[str, Any]:
        """Prepare data for test result charts"""
        summary = test_data.get('summary', {})
        
        # Pie chart data for overall results
        pie_data = {
            'labels': ['Passed', 'Failed', 'Skipped'],
            'data': [
                summary.get('tests_passed', 0),
                summary.get('tests_failed', 0),
                summary.get('tests_skipped', 0)
            ],
            'colors': ['#48bb78', '#f56565', '#ed8936']
        }
        
        # Bar chart data for test suites
        test_results = test_data.get('test_results', [])
        bar_data = {
            'labels': [result['suite_name'] for result in test_results],
            'passed': [result['tests_passed'] for result in test_results],
            'failed': [result['tests_failed'] for result in test_results],
            'skipped': [result['tests_skipped'] for result in test_results],
            'execution_times': [result['execution_time'] for result in test_results]
        }
        
        return {
            'pie': pie_data,
            'bar': bar_data
        }
        
    def prepare_performance_chart_data(self, performance_data: Dict[str, Any]) -> Dict[str, Any]:
        """Prepare data for performance charts"""
        if not performance_data or 'metrics' not in performance_data:
            return None
            
        metrics = performance_data['metrics']
        
        # Extract performance metrics
        test_names = []
        execution_times = []
        memory_usage = []
        throughput = []
        
        for metric in metrics:
            test_names.append(metric.get('test_name', ''))
            execution_times.append(metric.get('execution_time', 0))
            memory_usage.append(metric.get('peak_memory_mb', 0))
            throughput.append(metric.get('throughput_mb_per_sec', 0))
            
        return {
            'test_names': test_names,
            'execution_times': execution_times,
            'memory_usage': memory_usage,
            'throughput': throughput
        }
        
    def prepare_memory_chart_data(self, memory_data: Dict[str, Any]) -> Dict[str, Any]:
        """Prepare data for memory usage charts"""
        if not memory_data or 'profiles' not in memory_data:
            return None
            
        profiles = memory_data['profiles']
        
        test_names = []
        initial_memory = []
        peak_memory = []
        memory_delta = []
        
        for profile in profiles:
            if profile.get('success', False):
                test_names.append(profile.get('test_name', ''))
                initial_memory.append(profile.get('initial_memory_mb', 0))
                peak_memory.append(profile.get('peak_memory_mb', 0))
                memory_delta.append(profile.get('memory_delta_mb', 0))
                
        return {
            'test_names': test_names,
            'initial_memory': initial_memory,
            'peak_memory': peak_memory,
            'memory_delta': memory_delta
        }
        
    def prepare_quality_chart_data(self, quality_data: Dict[str, Any]) -> Dict[str, Any]:
        """Prepare data for quality gate charts"""
        if not quality_data or 'gates' not in quality_data:
            return None
            
        gates = quality_data['gates']
        
        gate_names = []
        statuses = []
        actual_values = []
        thresholds = []
        
        for gate in gates:
            gate_names.append(gate.get('gate_name', ''))
            statuses.append(gate.get('status', ''))
            
            # Only include numeric values for comparison chart
            actual = gate.get('actual_value', 0)
            threshold = gate.get('threshold_value', 0)
            
            if isinstance(actual, (int, float)) and isinstance(threshold, (int, float)):
                actual_values.append(actual)
                thresholds.append(threshold)
            else:
                actual_values.append(0)
                thresholds.append(0)
                
        # Status summary
        status_counts = {}
        for status in statuses:
            status_counts[status] = status_counts.get(status, 0) + 1
            
        return {
            'gate_names': gate_names,
            'statuses': statuses,
            'actual_values': actual_values,
            'thresholds': thresholds,
            'status_counts': status_counts
        }
        
    def create_performance_charts(self, data: Dict[str, Any]) -> str:
        """Create performance charts HTML"""
        return f"""
            <div class="chart-container">
                <h3>Performance - Execution Times</h3>
                <canvas id="performanceTimeChart"></canvas>
            </div>
            
            <div class="chart-container">
                <h3>Performance - Memory Usage</h3>
                <canvas id="performanceMemoryChart"></canvas>
            </div>
        """
        
    def create_memory_charts(self, data: Dict[str, Any]) -> str:
        """Create memory usage charts HTML"""
        return f"""
            <div class="chart-container">
                <h3>Memory Usage Profile</h3>
                <canvas id="memoryProfileChart"></canvas>
            </div>
            
            <div class="chart-container">
                <h3>Memory Delta by Test</h3>
                <canvas id="memoryDeltaChart"></canvas>
            </div>
        """
        
    def create_quality_charts(self, data: Dict[str, Any]) -> str:
        """Create quality gate charts HTML"""
        return f"""
            <div class="chart-container">
                <h3>Quality Gate Status</h3>
                <canvas id="qualityStatusChart"></canvas>
            </div>
            
            <div class="chart-container">
                <h3>Quality Metrics vs Thresholds</h3>
                <canvas id="qualityMetricsChart"></canvas>
            </div>
        """
        
    def create_test_details_table(self, test_data: Dict[str, Any]) -> str:
        """Create test details table"""
        test_results = test_data.get('test_results', [])
        
        rows = []
        for result in test_results:
            status_class = 'status-pass' if result['success'] else 'status-fail'
            status_text = 'PASS' if result['success'] else 'FAIL'
            
            rows.append(f"""
                <tr>
                    <td>{result['suite_name']}</td>
                    <td class="{status_class}">{status_text}</td>
                    <td>{result['tests_run']}</td>
                    <td class="status-pass">{result['tests_passed']}</td>
                    <td class="status-fail">{result['tests_failed']}</td>
                    <td class="status-skip">{result['tests_skipped']}</td>
                    <td>{result['execution_time']:.2f}s</td>
                </tr>
            """)
            
        return f"""
            <div class="details-table">
                <h3>üìä Test Suite Details</h3>
                <table>
                    <thead>
                        <tr>
                            <th>Suite Name</th>
                            <th>Status</th>
                            <th>Total Tests</th>
                            <th>Passed</th>
                            <th>Failed</th>
                            <th>Skipped</th>
                            <th>Execution Time</th>
                        </tr>
                    </thead>
                    <tbody>
                        {''.join(rows)}
                    </tbody>
                </table>
            </div>
        """
        
    def create_performance_details(self, performance_data: Dict[str, Any]) -> str:
        """Create performance details table"""
        if not performance_data or 'metrics' not in performance_data:
            return ""
            
        metrics = performance_data['metrics']
        
        rows = []
        for metric in metrics:
            rows.append(f"""
                <tr>
                    <td>{metric.get('test_name', 'N/A')}</td>
                    <td>{metric.get('execution_time', 0):.3f}s</td>
                    <td>{metric.get('peak_memory_mb', 0):.2f} MB</td>
                    <td>{metric.get('memory_delta_mb', 0):.2f} MB</td>
                    <td>{metric.get('throughput_mb_per_sec', 0):.2f} MB/s</td>
                    <td>{metric.get('file_size_mb', 0):.2f} MB</td>
                </tr>
            """)
            
        return f"""
            <div class="details-table">
                <h3>‚ö° Performance Metrics</h3>
                <table>
                    <thead>
                        <tr>
                            <th>Test Name</th>
                            <th>Execution Time</th>
                            <th>Peak Memory</th>
                            <th>Memory Delta</th>
                            <th>Throughput</th>
                            <th>File Size</th>
                        </tr>
                    </thead>
                    <tbody>
                        {''.join(rows)}
                    </tbody>
                </table>
            </div>
        """
        
    def create_memory_details(self, memory_data: Dict[str, Any]) -> str:
        """Create memory usage details table"""
        if not memory_data or 'profiles' not in memory_data:
            return ""
            
        profiles = memory_data['profiles']
        
        rows = []
        for profile in profiles:
            status_class = 'status-pass' if profile.get('success', False) else 'status-fail'
            status_text = 'SUCCESS' if profile.get('success', False) else 'FAILED'
            
            rows.append(f"""
                <tr>
                    <td>{profile.get('test_name', 'N/A')}</td>
                    <td class="{status_class}">{status_text}</td>
                    <td>{profile.get('initial_memory_mb', 0):.2f} MB</td>
                    <td>{profile.get('peak_memory_mb', 0):.2f} MB</td>
                    <td>{profile.get('memory_delta_mb', 0):.2f} MB</td>
                    <td>{profile.get('execution_time_sec', 0):.2f}s</td>
                    <td>{profile.get('gc_collections', 0)}</td>
                </tr>
            """)
            
        return f"""
            <div class="details-table">
                <h3>üíæ Memory Usage Profiles</h3>
                <table>
                    <thead>
                        <tr>
                            <th>Test Name</th>
                            <th>Status</th>
                            <th>Initial Memory</th>
                            <th>Peak Memory</th>
                            <th>Memory Delta</th>
                            <th>Execution Time</th>
                            <th>GC Collections</th>
                        </tr>
                    </thead>
                    <tbody>
                        {''.join(rows)}
                    </tbody>
                </table>
            </div>
        """
        
    def create_quality_details(self, quality_data: Dict[str, Any]) -> str:
        """Create quality gate details table"""
        if not quality_data or 'gates' not in quality_data:
            return ""
            
        gates = quality_data['gates']
        
        rows = []
        for gate in gates:
            status = gate.get('status', 'unknown')
            status_class = {
                'passed': 'status-pass',
                'failed': 'status-fail',
                'warning': 'status-skip',
                'skipped': 'status-skip',
                'error': 'status-fail'
            }.get(status, '')
            
            status_text = status.upper()
            
            rows.append(f"""
                <tr>
                    <td>{gate.get('gate_name', 'N/A')}</td>
                    <td class="{status_class}">{status_text}</td>
                    <td>{gate.get('actual_value', 'N/A')}</td>
                    <td>{gate.get('threshold_value', 'N/A')}</td>
                    <td>{gate.get('message', 'N/A')}</td>
                </tr>
            """)
            
        return f"""
            <div class="details-table">
                <h3>üéØ Quality Gate Results</h3>
                <table>
                    <thead>
                        <tr>
                            <th>Gate Name</th>
                            <th>Status</th>
                            <th>Actual Value</th>
                            <th>Threshold</th>
                            <th>Message</th>
                        </tr>
                    </thead>
                    <tbody>
                        {''.join(rows)}
                    </tbody>
                </table>
            </div>
        """
        
    def create_chart_scripts(self, test_data: Dict[str, Any], 
                            performance_data: Dict[str, Any] = None,
                            memory_data: Dict[str, Any] = None,
                            quality_data: Dict[str, Any] = None) -> str:
        """Create JavaScript for charts"""
        
        scripts = []
        
        # Test results pie chart
        if test_data and 'pie' in test_data:
            pie_data = test_data['pie']
            scripts.append(f"""
                // Test Results Pie Chart
                const testResultsCtx = document.getElementById('testResultsChart').getContext('2d');
                new Chart(testResultsCtx, {{
                    type: 'doughnut',
                    data: {{
                        labels: {json.dumps(pie_data['labels'])},
                        datasets: [{{
                            data: {json.dumps(pie_data['data'])},
                            backgroundColor: {json.dumps(pie_data['colors'])},
                            borderWidth: 2,
                            borderColor: '#ffffff'
                        }}]
                    }},
                    options: {{
                        responsive: true,
                        plugins: {{
                            legend: {{
                                position: 'bottom'
                            }}
                        }}
                    }}
                }});
            """)
            
        # Test execution timeline
        if test_data and 'bar' in test_data:
            bar_data = test_data['bar']
            scripts.append(f"""
                // Test Execution Timeline
                const timelineCtx = document.getElementById('timelineChart').getContext('2d');
                new Chart(timelineCtx, {{
                    type: 'bar',
                    data: {{
                        labels: {json.dumps(bar_data['labels'])},
                        datasets: [{{
                            label: 'Execution Time (s)',
                            data: {json.dumps(bar_data['execution_times'])},
                            backgroundColor: 'rgba(102, 126, 234, 0.6)',
                            borderColor: 'rgba(102, 126, 234, 1)',
                            borderWidth: 1
                        }}]
                    }},
                    options: {{
                        responsive: true,
                        scales: {{
                            y: {{
                                beginAtZero: true,
                                title: {{
                                    display: true,
                                    text: 'Execution Time (seconds)'
                                }}
                            }}
                        }}
                    }}
                }});
            """)
            
        # Performance charts
        if performance_data:
            scripts.append(f"""
                // Performance Time Chart
                const perfTimeCtx = document.getElementById('performanceTimeChart').getContext('2d');
                new Chart(perfTimeCtx, {{
                    type: 'line',
                    data: {{
                        labels: {json.dumps(performance_data['test_names'])},
                        datasets: [{{
                            label: 'Execution Time (s)',
                            data: {json.dumps(performance_data['execution_times'])},
                            borderColor: 'rgba(245, 101, 101, 1)',
                            backgroundColor: 'rgba(245, 101, 101, 0.1)',
                            borderWidth: 2,
                            fill: true
                        }}]
                    }},
                    options: {{
                        responsive: true,
                        scales: {{
                            y: {{
                                beginAtZero: true
                            }}
                        }}
                    }}
                }});
                
                // Performance Memory Chart
                const perfMemCtx = document.getElementById('performanceMemoryChart').getContext('2d');
                new Chart(perfMemCtx, {{
                    type: 'bar',
                    data: {{
                        labels: {json.dumps(performance_data['test_names'])},
                        datasets: [{{
                            label: 'Memory Usage (MB)',
                            data: {json.dumps(performance_data['memory_usage'])},
                            backgroundColor: 'rgba(72, 187, 120, 0.6)',
                            borderColor: 'rgba(72, 187, 120, 1)',
                            borderWidth: 1
                        }}]
                    }},
                    options: {{
                        responsive: true,
                        scales: {{
                            y: {{
                                beginAtZero: true
                            }}
                        }}
                    }}
                }});
            """)
            
        # Memory charts
        if memory_data:
            scripts.append(f"""
                // Memory Profile Chart
                const memProfileCtx = document.getElementById('memoryProfileChart').getContext('2d');
                new Chart(memProfileCtx, {{
                    type: 'line',
                    data: {{
                        labels: {json.dumps(memory_data['test_names'])},
                        datasets: [{{
                            label: 'Initial Memory (MB)',
                            data: {json.dumps(memory_data['initial_memory'])},
                            borderColor: 'rgba(54, 162, 235, 1)',
                            backgroundColor: 'rgba(54, 162, 235, 0.1)',
                            borderWidth: 2
                        }}, {{
                            label: 'Peak Memory (MB)',
                            data: {json.dumps(memory_data['peak_memory'])},
                            borderColor: 'rgba(255, 99, 132, 1)',
                            backgroundColor: 'rgba(255, 99, 132, 0.1)',
                            borderWidth: 2
                        }}]
                    }},
                    options: {{
                        responsive: true,
                        scales: {{
                            y: {{
                                beginAtZero: true
                            }}
                        }}
                    }}
                }});
                
                // Memory Delta Chart
                const memDeltaCtx = document.getElementById('memoryDeltaChart').getContext('2d');
                new Chart(memDeltaCtx, {{
                    type: 'bar',
                    data: {{
                        labels: {json.dumps(memory_data['test_names'])},
                        datasets: [{{
                            label: 'Memory Delta (MB)',
                            data: {json.dumps(memory_data['memory_delta'])},
                            backgroundColor: {json.dumps(['rgba(72, 187, 120, 0.6)' if x >= 0 else 'rgba(245, 101, 101, 0.6)' for x in memory_data['memory_delta']])},
                            borderColor: {json.dumps(['rgba(72, 187, 120, 1)' if x >= 0 else 'rgba(245, 101, 101, 1)' for x in memory_data['memory_delta']])},
                            borderWidth: 1
                        }}]
                    }},
                    options: {{
                        responsive: true,
                        scales: {{
                            y: {{
                                beginAtZero: true
                            }}
                        }}
                    }}
                }});
            """)
            
        # Quality gate charts
        if quality_data:
            status_counts = quality_data['status_counts']
            scripts.append(f"""
                // Quality Status Chart
                const qualityStatusCtx = document.getElementById('qualityStatusChart').getContext('2d');
                new Chart(qualityStatusCtx, {{
                    type: 'pie',
                    data: {{
                        labels: {json.dumps(list(status_counts.keys()))},
                        datasets: [{{
                            data: {json.dumps(list(status_counts.values()))},
                            backgroundColor: ['#48bb78', '#f56565', '#ed8936', '#4299e1', '#9f7aea'],
                            borderWidth: 2,
                            borderColor: '#ffffff'
                        }}]
                    }},
                    options: {{
                        responsive: true,
                        plugins: {{
                            legend: {{
                                position: 'bottom'
                            }}
                        }}
                    }}
                }});
                
                // Quality Metrics Chart
                const qualityMetricsCtx = document.getElementById('qualityMetricsChart').getContext('2d');
                new Chart(qualityMetricsCtx, {{
                    type: 'radar',
                    data: {{
                        labels: {json.dumps(quality_data['gate_names'])},
                        datasets: [{{
                            label: 'Actual Values',
                            data: {json.dumps(quality_data['actual_values'])},
                            borderColor: 'rgba(102, 126, 234, 1)',
                            backgroundColor: 'rgba(102, 126, 234, 0.2)',
                            borderWidth: 2
                        }}, {{
                            label: 'Thresholds',
                            data: {json.dumps(quality_data['thresholds'])},
                            borderColor: 'rgba(245, 101, 101, 1)',
                            backgroundColor: 'rgba(245, 101, 101, 0.2)',
                            borderWidth: 2
                        }}]
                    }},
                    options: {{
                        responsive: true,
                        plugins: {{
                            legend: {{
                                position: 'bottom'
                            }}
                        }}
                    }}
                }});
            """)
            
        return "\\n".join(scripts)

def main():
    """Main entry point for dashboard generation"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Generate test dashboard")
    parser.add_argument("--test-data", required=True, help="Test results JSON file")
    parser.add_argument("--performance-data", help="Performance results JSON file")
    parser.add_argument("--memory-data", help="Memory test results JSON file")
    parser.add_argument("--quality-data", help="Quality gate results JSON file")
    parser.add_argument("--output-dir", default="test_reports", help="Output directory")
    
    args = parser.parse_args()
    
    # Load data files
    def load_json_file(file_path):
        if file_path and os.path.exists(file_path):
            try:
                with open(file_path, 'r') as f:
                    return json.load(f)
            except Exception as e:
                print(f"Warning: Could not load {file_path}: {e}")
        return None
        
    test_data = load_json_file(args.test_data)
    performance_data = load_json_file(args.performance_data)
    memory_data = load_json_file(args.memory_data)
    quality_data = load_json_file(args.quality_data)
    
    if not test_data:
        print("Error: Test data file is required and must be valid JSON")
        sys.exit(1)
        
    # Generate dashboard
    dashboard = TestDashboard(args.output_dir)
    dashboard_file = dashboard.generate_dashboard(
        test_data, performance_data, memory_data, quality_data
    )
    
    print(f"Dashboard generated: {os.path.abspath(dashboard_file)}")
    print(f"Open in browser: file://{os.path.abspath(dashboard_file)}")

if __name__ == "__main__":
    main()